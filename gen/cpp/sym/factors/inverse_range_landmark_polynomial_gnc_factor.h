// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/polynomial_camera_cal.h>
#include <sym/pose3.h>

namespace sym {

/**
 * Return the 2dof residual of reprojecting the landmark ray into the target spherical camera and
 * comparing it against the correspondence.
 *
 * The landmark is specified as a camera point in the source camera with an inverse range; this
 * means the landmark is fixed in the source camera and always has residual 0 there (this 0
 * residual is not returned, only the residual in the target camera is returned).
 *
 * The norm of the residual is whitened using the
 * :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>`.  Whitening each
 * component of the reprojection error separately would result in rejecting individual components
 * as outliers. Instead, we minimize the whitened norm of the full reprojection error for each
 * point.  See
 * :meth:`ScalarNoiseModel.whiten_norm <symforce.opt.noise_models.ScalarNoiseModel.whiten_norm>`
 * for more information on this, and
 * :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>` for more information on
 * the noise model.
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     target_pose: The pose of the target camera
 *     target_calibration: The target spherical camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     p_camera_source: The location of the landmark in the source camera coordinate, will be
 *         normalized
 *     target_pixel: The location of the correspondence in the target camera
 *     weight: The weight of the factor
 *     gnc_mu: The mu convexity parameter for the
 *         :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>`
 *     gnc_scale: The scale parameter for the
 *         :class:`BarronNoiseModel <symforce.opt.noise_models.BarronNoiseModel>`
 *     epsilon: Small positive value
 *
 * Outputs:
 *     res: 2dof whiten residual of the reprojection
 *     jacobian: (2x13) jacobian of res wrt args source_pose (6), target_pose (6),
 *               source_inverse_range (1)
 *     hessian: (13x13) Gauss-Newton hessian for args source_pose (6), target_pose (6),
 *              source_inverse_range (1)
 *     rhs: (13x1) Gauss-Newton rhs for args source_pose (6), target_pose (6), source_inverse_range
 *          (1)
 */
template <typename Scalar>
void InverseRangeLandmarkPolynomialGncFactor(
    const sym::Pose3<Scalar>& source_pose, const sym::Pose3<Scalar>& target_pose,
    const sym::PolynomialCameraCal<Scalar>& target_calibration, const Scalar source_inverse_range,
    const Eigen::Matrix<Scalar, 3, 1>& p_camera_source,
    const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar weight, const Scalar gnc_mu,
    const Scalar gnc_scale, const Scalar epsilon, Eigen::Matrix<Scalar, 2, 1>* const res = nullptr,
    Eigen::Matrix<Scalar, 2, 13>* const jacobian = nullptr,
    Eigen::Matrix<Scalar, 13, 13>* const hessian = nullptr,
    Eigen::Matrix<Scalar, 13, 1>* const rhs = nullptr) {
  // Total ops: 1125

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();
  const Eigen::Matrix<Scalar, 8, 1>& _target_calibration = target_calibration.Data();

  // Intermediate terms (299)
  const Scalar _tmp0 = std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp1 = -2 * _tmp0;
  const Scalar _tmp2 = std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp3 = 1 - 2 * _tmp2;
  const Scalar _tmp4 = _tmp1 + _tmp3;
  const Scalar _tmp5 = 2 * _source_pose[0];
  const Scalar _tmp6 = _source_pose[3] * _tmp5;
  const Scalar _tmp7 = 2 * _source_pose[1];
  const Scalar _tmp8 = _source_pose[2] * _tmp7;
  const Scalar _tmp9 = _tmp6 + _tmp8;
  const Scalar _tmp10 = std::pow(Scalar(epsilon + std::pow(p_camera_source(0, 0), Scalar(2)) +
                                        std::pow(p_camera_source(1, 0), Scalar(2)) +
                                        std::pow(p_camera_source(2, 0), Scalar(2))),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp11 = _tmp10 * p_camera_source(1, 0);
  const Scalar _tmp12 = _source_pose[2] * _tmp5;
  const Scalar _tmp13 = _source_pose[3] * _tmp7;
  const Scalar _tmp14 = -_tmp13;
  const Scalar _tmp15 = _tmp12 + _tmp14;
  const Scalar _tmp16 = _tmp10 * p_camera_source(0, 0);
  const Scalar _tmp17 = std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp18 = -2 * _tmp17;
  const Scalar _tmp19 = std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp20 = 1 - 2 * _tmp19;
  const Scalar _tmp21 = _tmp10 * p_camera_source(2, 0);
  const Scalar _tmp22 = _source_pose[6] - _target_pose[6];
  const Scalar _tmp23 =
      _tmp11 * _tmp9 + _tmp15 * _tmp16 + _tmp21 * (_tmp18 + _tmp20) + _tmp22 * source_inverse_range;
  const Scalar _tmp24 = 2 * _target_pose[1];
  const Scalar _tmp25 = _target_pose[2] * _tmp24;
  const Scalar _tmp26 = 2 * _target_pose[0] * _target_pose[3];
  const Scalar _tmp27 = -_tmp26;
  const Scalar _tmp28 = _tmp25 + _tmp27;
  const Scalar _tmp29 = _source_pose[0] * _tmp7;
  const Scalar _tmp30 = 2 * _source_pose[2] * _source_pose[3];
  const Scalar _tmp31 = _tmp10 * (_tmp29 + _tmp30);
  const Scalar _tmp32 = -_tmp6;
  const Scalar _tmp33 = _tmp32 + _tmp8;
  const Scalar _tmp34 = std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp35 = -2 * _tmp34;
  const Scalar _tmp36 = _source_pose[5] - _target_pose[5];
  const Scalar _tmp37 = _tmp11 * (_tmp18 + _tmp35 + 1) + _tmp21 * _tmp33 +
                        _tmp31 * p_camera_source(0, 0) + _tmp36 * source_inverse_range;
  const Scalar _tmp38 = 2 * _target_pose[2];
  const Scalar _tmp39 = _target_pose[0] * _tmp38;
  const Scalar _tmp40 = _target_pose[3] * _tmp24;
  const Scalar _tmp41 = _tmp39 + _tmp40;
  const Scalar _tmp42 = -_tmp30;
  const Scalar _tmp43 = _tmp29 + _tmp42;
  const Scalar _tmp44 = _tmp12 + _tmp13;
  const Scalar _tmp45 = _source_pose[4] - _target_pose[4];
  const Scalar _tmp46 = _tmp11 * _tmp43 + _tmp16 * (_tmp20 + _tmp35) + _tmp21 * _tmp44 +
                        _tmp45 * source_inverse_range;
  const Scalar _tmp47 = _tmp28 * _tmp37 + _tmp41 * _tmp46;
  const Scalar _tmp48 = _tmp23 * _tmp4 + _tmp47;
  const Scalar _tmp49 = std::max<Scalar>(_tmp48, epsilon);
  const Scalar _tmp50 = Scalar(1.0) / (_tmp49);
  const Scalar _tmp51 = std::pow(_tmp49, Scalar(-2));
  const Scalar _tmp52 = std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp53 = -2 * _tmp52;
  const Scalar _tmp54 = _tmp1 + _tmp53 + 1;
  const Scalar _tmp55 = _tmp25 + _tmp26;
  const Scalar _tmp56 = _target_pose[3] * _tmp38;
  const Scalar _tmp57 = -_tmp56;
  const Scalar _tmp58 = _target_pose[0] * _tmp24;
  const Scalar _tmp59 = _tmp57 + _tmp58;
  const Scalar _tmp60 = _tmp23 * _tmp55 + _tmp46 * _tmp59;
  const Scalar _tmp61 = _tmp37 * _tmp54 + _tmp60;
  const Scalar _tmp62 = std::pow(_tmp61, Scalar(2));
  const Scalar _tmp63 = _tmp3 + _tmp53;
  const Scalar _tmp64 = -_tmp40;
  const Scalar _tmp65 = _tmp39 + _tmp64;
  const Scalar _tmp66 = _tmp56 + _tmp58;
  const Scalar _tmp67 = _tmp23 * _tmp65 + _tmp37 * _tmp66;
  const Scalar _tmp68 = _tmp46 * _tmp63 + _tmp67;
  const Scalar _tmp69 = std::pow(_tmp68, Scalar(2));
  const Scalar _tmp70 = _tmp51 * _tmp62 + _tmp51 * _tmp69 + epsilon;
  const Scalar _tmp71 = std::pow(_tmp70, Scalar(2));
  const Scalar _tmp72 = Scalar(1.0) * _target_calibration[5];
  const Scalar _tmp73 = Scalar(1.0) * _target_calibration[6] * _tmp71 +
                        Scalar(1.0) * _target_calibration[7] *
                            [&]() {
                              const Scalar base = _tmp70;
                              return base * base * base;
                            }() +
                        _tmp70 * _tmp72 + Scalar(1.0);
  const Scalar _tmp74 = _tmp50 * _tmp73;
  const Scalar _tmp75 = _target_calibration[0] * _tmp68;
  const Scalar _tmp76 = _target_calibration[2] + _tmp74 * _tmp75 - target_pixel(0, 0);
  const Scalar _tmp77 = _target_calibration[1] * _tmp74;
  const Scalar _tmp78 = _target_calibration[3] + _tmp61 * _tmp77 - target_pixel(1, 0);
  const Scalar _tmp79 = std::pow(_tmp76, Scalar(2)) + std::pow(_tmp78, Scalar(2)) + epsilon;
  const Scalar _tmp80 = std::pow(_tmp79, Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp81 = std::sqrt(weight);
  const Scalar _tmp82 =
      std::max<Scalar>(0, std::min<Scalar>((((_tmp48) > 0) - ((_tmp48) < 0)),
                                           (((_target_calibration[4] - std::sqrt(_tmp70)) > 0) -
                                            ((_target_calibration[4] - std::sqrt(_tmp70)) < 0))));
  const Scalar _tmp83 = Scalar(1.0) / (epsilon - gnc_mu + 1);
  const Scalar _tmp84 = epsilon + std::fabs(_tmp83);
  const Scalar _tmp85 = 2 - _tmp83;
  const Scalar _tmp86 =
      _tmp85 + epsilon * (2 * std::min<Scalar>(0, (((_tmp85) > 0) - ((_tmp85) < 0))) + 1);
  const Scalar _tmp87 = std::pow(gnc_scale, Scalar(-2));
  const Scalar _tmp88 = _tmp79 * _tmp87 / _tmp84 + 1;
  const Scalar _tmp89 = (Scalar(1) / Scalar(2)) * _tmp86;
  const Scalar _tmp90 =
      std::sqrt(Scalar(2)) * std::sqrt(Scalar(_tmp84 * (std::pow(_tmp88, _tmp89) - 1) / _tmp86));
  const Scalar _tmp91 = _tmp81 * _tmp82 * _tmp90;
  const Scalar _tmp92 = _tmp80 * _tmp91;
  const Scalar _tmp93 = _tmp76 * _tmp92;
  const Scalar _tmp94 = _tmp78 * _tmp92;
  const Scalar _tmp95 = std::pow(_source_pose[3], Scalar(2));
  const Scalar _tmp96 = -_tmp95;
  const Scalar _tmp97 = -_tmp19;
  const Scalar _tmp98 = _tmp11 * _tmp33 + _tmp21 * (_tmp17 + _tmp34 + _tmp96 + _tmp97);
  const Scalar _tmp99 = -_tmp8;
  const Scalar _tmp100 = _tmp95 + _tmp97;
  const Scalar _tmp101 = -_tmp17;
  const Scalar _tmp102 = _tmp101 + _tmp34;
  const Scalar _tmp103 = _tmp11 * (_tmp100 + _tmp102) + _tmp21 * (_tmp32 + _tmp99);
  const Scalar _tmp104 = -_tmp29;
  const Scalar _tmp105 = _tmp11 * _tmp44 + _tmp21 * (_tmp104 + _tmp30);
  const Scalar _tmp106 = _tmp103 * _tmp65 + _tmp105 * _tmp63 + _tmp66 * _tmp98;
  const Scalar _tmp107 = _target_calibration[0] * _tmp74;
  const Scalar _tmp108 = _tmp103 * _tmp4 + _tmp105 * _tmp41 + _tmp28 * _tmp98;
  const Scalar _tmp109 = (((_tmp48 - epsilon) > 0) - ((_tmp48 - epsilon) < 0)) + 1;
  const Scalar _tmp110 = _tmp109 / [&]() {
    const Scalar base = _tmp49;
    return base * base * base;
  }();
  const Scalar _tmp111 = _tmp110 * _tmp62;
  const Scalar _tmp112 = _tmp103 * _tmp55 + _tmp105 * _tmp59 + _tmp54 * _tmp98;
  const Scalar _tmp113 = 2 * _tmp51;
  const Scalar _tmp114 = _tmp113 * _tmp61;
  const Scalar _tmp115 = _tmp110 * _tmp69;
  const Scalar _tmp116 = _tmp113 * _tmp68;
  const Scalar _tmp117 =
      _tmp106 * _tmp116 - _tmp108 * _tmp111 - _tmp108 * _tmp115 + _tmp112 * _tmp114;
  const Scalar _tmp118 = Scalar(3.0) * _target_calibration[7] * _tmp71;
  const Scalar _tmp119 = Scalar(2.0) * _target_calibration[6] * _tmp70;
  const Scalar _tmp120 = _tmp117 * _tmp118 + _tmp117 * _tmp119 + _tmp117 * _tmp72;
  const Scalar _tmp121 = _tmp50 * _tmp75;
  const Scalar _tmp122 = (Scalar(1) / Scalar(2)) * _tmp109 * _tmp51 * _tmp73;
  const Scalar _tmp123 = _tmp108 * _tmp122;
  const Scalar _tmp124 = _tmp106 * _tmp107 + _tmp120 * _tmp121 - _tmp123 * _tmp75;
  const Scalar _tmp125 = 2 * _tmp76;
  const Scalar _tmp126 = _target_calibration[1] * _tmp61;
  const Scalar _tmp127 = _tmp126 * _tmp50;
  const Scalar _tmp128 = _tmp112 * _tmp77 + _tmp120 * _tmp127 - _tmp123 * _tmp126;
  const Scalar _tmp129 = 2 * _tmp78;
  const Scalar _tmp130 = _tmp124 * _tmp125 + _tmp128 * _tmp129;
  const Scalar _tmp131 = (Scalar(1) / Scalar(2)) * _tmp76;
  const Scalar _tmp132 =
      _tmp80 * _tmp81 * _tmp82 * _tmp87 * std::pow(_tmp88, Scalar(_tmp89 - 1)) / _tmp90;
  const Scalar _tmp133 = _tmp131 * _tmp132;
  const Scalar _tmp134 = _tmp91 / (_tmp79 * std::sqrt(_tmp79));
  const Scalar _tmp135 = _tmp131 * _tmp134;
  const Scalar _tmp136 = _tmp124 * _tmp92 + _tmp130 * _tmp133 - _tmp130 * _tmp135;
  const Scalar _tmp137 = (Scalar(1) / Scalar(2)) * _tmp78;
  const Scalar _tmp138 = _tmp134 * _tmp137;
  const Scalar _tmp139 = _tmp132 * _tmp137;
  const Scalar _tmp140 = _tmp128 * _tmp92 - _tmp130 * _tmp138 + _tmp130 * _tmp139;
  const Scalar _tmp141 = -_tmp12;
  const Scalar _tmp142 = -_tmp34;
  const Scalar _tmp143 = _tmp142 + _tmp17;
  const Scalar _tmp144 = _tmp16 * (_tmp14 + _tmp141) + _tmp21 * (_tmp100 + _tmp143);
  const Scalar _tmp145 = _tmp19 + _tmp96;
  const Scalar _tmp146 = _tmp15 * _tmp21 + _tmp16 * (_tmp143 + _tmp145);
  const Scalar _tmp147 = _tmp16 * (_tmp6 + _tmp99) + _tmp31 * p_camera_source(2, 0);
  const Scalar _tmp148 = _tmp144 * _tmp59 + _tmp146 * _tmp55 + _tmp147 * _tmp54;
  const Scalar _tmp149 = _tmp144 * _tmp41 + _tmp146 * _tmp4 + _tmp147 * _tmp28;
  const Scalar _tmp150 = _tmp144 * _tmp63 + _tmp146 * _tmp65 + _tmp147 * _tmp66;
  const Scalar _tmp151 =
      -_tmp111 * _tmp149 + _tmp114 * _tmp148 - _tmp115 * _tmp149 + _tmp116 * _tmp150;
  const Scalar _tmp152 = _tmp118 * _tmp151 + _tmp119 * _tmp151 + _tmp151 * _tmp72;
  const Scalar _tmp153 = _tmp122 * _tmp126;
  const Scalar _tmp154 = _tmp127 * _tmp152 + _tmp148 * _tmp77 - _tmp149 * _tmp153;
  const Scalar _tmp155 = _tmp122 * _tmp75;
  const Scalar _tmp156 = _tmp107 * _tmp150 + _tmp121 * _tmp152 - _tmp149 * _tmp155;
  const Scalar _tmp157 = _tmp125 * _tmp156 + _tmp129 * _tmp154;
  const Scalar _tmp158 = _tmp133 * _tmp157 - _tmp135 * _tmp157 + _tmp156 * _tmp92;
  const Scalar _tmp159 = -_tmp138 * _tmp157 + _tmp139 * _tmp157 + _tmp154 * _tmp92;
  const Scalar _tmp160 = _tmp11 * (_tmp13 + _tmp141) + _tmp16 * _tmp9;
  const Scalar _tmp161 = _tmp11 * (_tmp102 + _tmp145) + _tmp16 * _tmp43;
  const Scalar _tmp162 =
      _tmp11 * (_tmp104 + _tmp42) + _tmp16 * (_tmp101 + _tmp142 + _tmp19 + _tmp95);
  const Scalar _tmp163 = _tmp160 * _tmp55 + _tmp161 * _tmp59 + _tmp162 * _tmp54;
  const Scalar _tmp164 = _tmp160 * _tmp4 + _tmp161 * _tmp41 + _tmp162 * _tmp28;
  const Scalar _tmp165 = _tmp160 * _tmp65 + _tmp161 * _tmp63 + _tmp162 * _tmp66;
  const Scalar _tmp166 =
      -_tmp111 * _tmp164 + _tmp114 * _tmp163 - _tmp115 * _tmp164 + _tmp116 * _tmp165;
  const Scalar _tmp167 = _tmp118 * _tmp166 + _tmp119 * _tmp166 + _tmp166 * _tmp72;
  const Scalar _tmp168 = _tmp127 * _tmp167 - _tmp153 * _tmp164 + _tmp163 * _tmp77;
  const Scalar _tmp169 = _tmp107 * _tmp165 + _tmp121 * _tmp167 - _tmp155 * _tmp164;
  const Scalar _tmp170 = _tmp125 * _tmp169 + _tmp129 * _tmp168;
  const Scalar _tmp171 = _tmp133 * _tmp170 - _tmp135 * _tmp170 + _tmp169 * _tmp92;
  const Scalar _tmp172 = -_tmp138 * _tmp170 + _tmp139 * _tmp170 + _tmp168 * _tmp92;
  const Scalar _tmp173 = _tmp107 * source_inverse_range;
  const Scalar _tmp174 = _tmp173 * _tmp63;
  const Scalar _tmp175 = _tmp155 * source_inverse_range;
  const Scalar _tmp176 = _tmp175 * _tmp41;
  const Scalar _tmp177 = _tmp115 * source_inverse_range;
  const Scalar _tmp178 = _tmp177 * _tmp41;
  const Scalar _tmp179 = _tmp116 * source_inverse_range;
  const Scalar _tmp180 = _tmp179 * _tmp63;
  const Scalar _tmp181 = _tmp114 * source_inverse_range;
  const Scalar _tmp182 = _tmp181 * _tmp59;
  const Scalar _tmp183 = _tmp111 * source_inverse_range;
  const Scalar _tmp184 = _tmp183 * _tmp41;
  const Scalar _tmp185 = -_tmp178 + _tmp180 + _tmp182 - _tmp184;
  const Scalar _tmp186 = _tmp118 * _tmp185 + _tmp119 * _tmp185 + _tmp185 * _tmp72;
  const Scalar _tmp187 = _tmp121 * _tmp186 + _tmp174 - _tmp176;
  const Scalar _tmp188 = _tmp153 * source_inverse_range;
  const Scalar _tmp189 = _tmp188 * _tmp41;
  const Scalar _tmp190 = _tmp77 * source_inverse_range;
  const Scalar _tmp191 = _tmp190 * _tmp59;
  const Scalar _tmp192 = _tmp127 * _tmp186 - _tmp189 + _tmp191;
  const Scalar _tmp193 = _tmp125 * _tmp187 + _tmp129 * _tmp192;
  const Scalar _tmp194 = _tmp133 * _tmp193 - _tmp135 * _tmp193 + _tmp187 * _tmp92;
  const Scalar _tmp195 = _tmp137 * _tmp193;
  const Scalar _tmp196 = _tmp132 * _tmp195 - _tmp134 * _tmp195 + _tmp192 * _tmp92;
  const Scalar _tmp197 = _tmp181 * _tmp54;
  const Scalar _tmp198 = _tmp177 * _tmp28;
  const Scalar _tmp199 = _tmp183 * _tmp28;
  const Scalar _tmp200 = _tmp179 * _tmp66;
  const Scalar _tmp201 = _tmp197 - _tmp198 - _tmp199 + _tmp200;
  const Scalar _tmp202 = _tmp118 * _tmp201 + _tmp119 * _tmp201 + _tmp201 * _tmp72;
  const Scalar _tmp203 = _tmp175 * _tmp28;
  const Scalar _tmp204 = _tmp173 * _tmp66;
  const Scalar _tmp205 = _tmp121 * _tmp202 - _tmp203 + _tmp204;
  const Scalar _tmp206 = _tmp190 * _tmp54;
  const Scalar _tmp207 = _tmp188 * _tmp28;
  const Scalar _tmp208 = _tmp127 * _tmp202 + _tmp206 - _tmp207;
  const Scalar _tmp209 = _tmp125 * _tmp205 + _tmp129 * _tmp208;
  const Scalar _tmp210 = _tmp133 * _tmp209 - _tmp135 * _tmp209 + _tmp205 * _tmp92;
  const Scalar _tmp211 = -_tmp138 * _tmp209 + _tmp139 * _tmp209 + _tmp208 * _tmp92;
  const Scalar _tmp212 = _tmp188 * _tmp4;
  const Scalar _tmp213 = _tmp190 * _tmp55;
  const Scalar _tmp214 = _tmp65 * source_inverse_range;
  const Scalar _tmp215 = _tmp116 * _tmp214;
  const Scalar _tmp216 = _tmp177 * _tmp4;
  const Scalar _tmp217 = _tmp181 * _tmp55;
  const Scalar _tmp218 = _tmp183 * _tmp4;
  const Scalar _tmp219 = _tmp215 - _tmp216 + _tmp217 - _tmp218;
  const Scalar _tmp220 = _tmp118 * _tmp219 + _tmp119 * _tmp219 + _tmp219 * _tmp72;
  const Scalar _tmp221 = _tmp127 * _tmp220 - _tmp212 + _tmp213;
  const Scalar _tmp222 = _tmp175 * _tmp4;
  const Scalar _tmp223 = _tmp107 * _tmp214;
  const Scalar _tmp224 = _tmp121 * _tmp220 - _tmp222 + _tmp223;
  const Scalar _tmp225 = _tmp125 * _tmp224 + _tmp129 * _tmp221;
  const Scalar _tmp226 = _tmp134 * _tmp225;
  const Scalar _tmp227 = -_tmp131 * _tmp226 + _tmp133 * _tmp225 + _tmp224 * _tmp92;
  const Scalar _tmp228 = -_tmp137 * _tmp226 + _tmp139 * _tmp225 + _tmp221 * _tmp92;
  const Scalar _tmp229 = -_tmp25;
  const Scalar _tmp230 = std::pow(_target_pose[3], Scalar(2));
  const Scalar _tmp231 = -_tmp230;
  const Scalar _tmp232 = _tmp0 + _tmp231;
  const Scalar _tmp233 = -_tmp2;
  const Scalar _tmp234 = _tmp233 + _tmp52;
  const Scalar _tmp235 = -_tmp58;
  const Scalar _tmp236 =
      _tmp23 * (_tmp229 + _tmp27) + _tmp37 * (_tmp232 + _tmp234) + _tmp46 * (_tmp235 + _tmp56);
  const Scalar _tmp237 = -_tmp0;
  const Scalar _tmp238 = _tmp230 + _tmp237;
  const Scalar _tmp239 = _tmp23 * (_tmp234 + _tmp238) + _tmp47;
  const Scalar _tmp240 = -_tmp111 * _tmp236 + _tmp114 * _tmp239 - _tmp115 * _tmp236;
  const Scalar _tmp241 = _tmp118 * _tmp240 + _tmp119 * _tmp240 + _tmp240 * _tmp72;
  const Scalar _tmp242 = _tmp121 * _tmp241 - _tmp155 * _tmp236;
  const Scalar _tmp243 = _tmp127 * _tmp241 - _tmp153 * _tmp236 + _tmp239 * _tmp77;
  const Scalar _tmp244 = _tmp125 * _tmp242 + _tmp129 * _tmp243;
  const Scalar _tmp245 = _tmp133 * _tmp244 - _tmp135 * _tmp244 + _tmp242 * _tmp92;
  const Scalar _tmp246 = -_tmp138 * _tmp244 + _tmp139 * _tmp244 + _tmp243 * _tmp92;
  const Scalar _tmp247 = -_tmp52;
  const Scalar _tmp248 = _tmp2 + _tmp247;
  const Scalar _tmp249 = -_tmp39;
  const Scalar _tmp250 =
      _tmp23 * (_tmp232 + _tmp248) + _tmp37 * (_tmp229 + _tmp26) + _tmp46 * (_tmp249 + _tmp64);
  const Scalar _tmp251 = _tmp46 * (_tmp0 + _tmp230 + _tmp233 + _tmp247) + _tmp67;
  const Scalar _tmp252 = -_tmp111 * _tmp251 - _tmp115 * _tmp251 + _tmp116 * _tmp250;
  const Scalar _tmp253 = _tmp118 * _tmp252 + _tmp119 * _tmp252 + _tmp252 * _tmp72;
  const Scalar _tmp254 = _tmp107 * _tmp250 + _tmp121 * _tmp253 - _tmp155 * _tmp251;
  const Scalar _tmp255 = _tmp127 * _tmp253 - _tmp153 * _tmp251;
  const Scalar _tmp256 = _tmp125 * _tmp254 + _tmp129 * _tmp255;
  const Scalar _tmp257 = _tmp133 * _tmp256 - _tmp135 * _tmp256 + _tmp254 * _tmp92;
  const Scalar _tmp258 = -_tmp138 * _tmp256 + _tmp139 * _tmp256 + _tmp255 * _tmp92;
  const Scalar _tmp259 = _tmp37 * (_tmp238 + _tmp248) + _tmp60;
  const Scalar _tmp260 = _tmp23 * (_tmp249 + _tmp40) + _tmp37 * (_tmp235 + _tmp57) +
                         _tmp46 * (_tmp2 + _tmp231 + _tmp237 + _tmp52);
  const Scalar _tmp261 = _tmp114 * _tmp260 + _tmp116 * _tmp259;
  const Scalar _tmp262 = _tmp118 * _tmp261 + _tmp119 * _tmp261 + _tmp261 * _tmp72;
  const Scalar _tmp263 = _tmp107 * _tmp259 + _tmp121 * _tmp262;
  const Scalar _tmp264 = _tmp127 * _tmp262 + _tmp260 * _tmp77;
  const Scalar _tmp265 = _tmp125 * _tmp263 + _tmp129 * _tmp264;
  const Scalar _tmp266 = _tmp133 * _tmp265 - _tmp135 * _tmp265 + _tmp263 * _tmp92;
  const Scalar _tmp267 = -_tmp138 * _tmp265 + _tmp139 * _tmp265 + _tmp264 * _tmp92;
  const Scalar _tmp268 = _tmp178 - _tmp180 - _tmp182 + _tmp184;
  const Scalar _tmp269 = _tmp118 * _tmp268 + _tmp119 * _tmp268 + _tmp268 * _tmp72;
  const Scalar _tmp270 = _tmp121 * _tmp269 - _tmp174 + _tmp176;
  const Scalar _tmp271 = _tmp127 * _tmp269 + _tmp189 - _tmp191;
  const Scalar _tmp272 = _tmp125 * _tmp270 + _tmp129 * _tmp271;
  const Scalar _tmp273 = _tmp133 * _tmp272 - _tmp135 * _tmp272 + _tmp270 * _tmp92;
  const Scalar _tmp274 = -_tmp138 * _tmp272 + _tmp139 * _tmp272 + _tmp271 * _tmp92;
  const Scalar _tmp275 = -_tmp197 + _tmp198 + _tmp199 - _tmp200;
  const Scalar _tmp276 = _tmp118 * _tmp275 + _tmp119 * _tmp275 + _tmp275 * _tmp72;
  const Scalar _tmp277 = _tmp127 * _tmp276 - _tmp206 + _tmp207;
  const Scalar _tmp278 = _tmp121 * _tmp276 + _tmp203 - _tmp204;
  const Scalar _tmp279 = _tmp125 * _tmp278 + _tmp129 * _tmp277;
  const Scalar _tmp280 = _tmp133 * _tmp279 - _tmp135 * _tmp279 + _tmp278 * _tmp92;
  const Scalar _tmp281 = -_tmp138 * _tmp279 + _tmp139 * _tmp279 + _tmp277 * _tmp92;
  const Scalar _tmp282 = -_tmp215 + _tmp216 - _tmp217 + _tmp218;
  const Scalar _tmp283 = _tmp118 * _tmp282 + _tmp119 * _tmp282 + _tmp282 * _tmp72;
  const Scalar _tmp284 = _tmp121 * _tmp283 + _tmp222 - _tmp223;
  const Scalar _tmp285 = _tmp127 * _tmp283 + _tmp212 - _tmp213;
  const Scalar _tmp286 = _tmp125 * _tmp284 + _tmp129 * _tmp285;
  const Scalar _tmp287 = _tmp133 * _tmp286 - _tmp135 * _tmp286 + _tmp284 * _tmp92;
  const Scalar _tmp288 = -_tmp138 * _tmp286 + _tmp139 * _tmp286 + _tmp285 * _tmp92;
  const Scalar _tmp289 = _tmp22 * _tmp4 + _tmp28 * _tmp36 + _tmp41 * _tmp45;
  const Scalar _tmp290 = _tmp22 * _tmp65 + _tmp36 * _tmp66 + _tmp45 * _tmp63;
  const Scalar _tmp291 = _tmp22 * _tmp55 + _tmp36 * _tmp54 + _tmp45 * _tmp59;
  const Scalar _tmp292 =
      -_tmp111 * _tmp289 + _tmp114 * _tmp291 - _tmp115 * _tmp289 + _tmp116 * _tmp290;
  const Scalar _tmp293 = _tmp118 * _tmp292 + _tmp119 * _tmp292 + _tmp292 * _tmp72;
  const Scalar _tmp294 = _tmp107 * _tmp290 + _tmp121 * _tmp293 - _tmp155 * _tmp289;
  const Scalar _tmp295 = _tmp127 * _tmp293 - _tmp153 * _tmp289 + _tmp291 * _tmp77;
  const Scalar _tmp296 = _tmp125 * _tmp294 + _tmp129 * _tmp295;
  const Scalar _tmp297 = _tmp133 * _tmp296 - _tmp135 * _tmp296 + _tmp294 * _tmp92;
  const Scalar _tmp298 = -_tmp138 * _tmp296 + _tmp139 * _tmp296 + _tmp295 * _tmp92;

  // Output terms (4)
  if (res != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _res = (*res);

    _res(0, 0) = _tmp93;
    _res(1, 0) = _tmp94;
  }

  if (jacobian != nullptr) {
    Eigen::Matrix<Scalar, 2, 13>& _jacobian = (*jacobian);

    _jacobian(0, 0) = _tmp136;
    _jacobian(1, 0) = _tmp140;
    _jacobian(0, 1) = _tmp158;
    _jacobian(1, 1) = _tmp159;
    _jacobian(0, 2) = _tmp171;
    _jacobian(1, 2) = _tmp172;
    _jacobian(0, 3) = _tmp194;
    _jacobian(1, 3) = _tmp196;
    _jacobian(0, 4) = _tmp210;
    _jacobian(1, 4) = _tmp211;
    _jacobian(0, 5) = _tmp227;
    _jacobian(1, 5) = _tmp228;
    _jacobian(0, 6) = _tmp245;
    _jacobian(1, 6) = _tmp246;
    _jacobian(0, 7) = _tmp257;
    _jacobian(1, 7) = _tmp258;
    _jacobian(0, 8) = _tmp266;
    _jacobian(1, 8) = _tmp267;
    _jacobian(0, 9) = _tmp273;
    _jacobian(1, 9) = _tmp274;
    _jacobian(0, 10) = _tmp280;
    _jacobian(1, 10) = _tmp281;
    _jacobian(0, 11) = _tmp287;
    _jacobian(1, 11) = _tmp288;
    _jacobian(0, 12) = _tmp297;
    _jacobian(1, 12) = _tmp298;
  }

  if (hessian != nullptr) {
    Eigen::Matrix<Scalar, 13, 13>& _hessian = (*hessian);

    _hessian(0, 0) = std::pow(_tmp136, Scalar(2)) + std::pow(_tmp140, Scalar(2));
    _hessian(1, 0) = _tmp136 * _tmp158 + _tmp140 * _tmp159;
    _hessian(2, 0) = _tmp136 * _tmp171 + _tmp140 * _tmp172;
    _hessian(3, 0) = _tmp136 * _tmp194 + _tmp140 * _tmp196;
    _hessian(4, 0) = _tmp136 * _tmp210 + _tmp140 * _tmp211;
    _hessian(5, 0) = _tmp136 * _tmp227 + _tmp140 * _tmp228;
    _hessian(6, 0) = _tmp136 * _tmp245 + _tmp140 * _tmp246;
    _hessian(7, 0) = _tmp136 * _tmp257 + _tmp140 * _tmp258;
    _hessian(8, 0) = _tmp136 * _tmp266 + _tmp140 * _tmp267;
    _hessian(9, 0) = _tmp136 * _tmp273 + _tmp140 * _tmp274;
    _hessian(10, 0) = _tmp136 * _tmp280 + _tmp140 * _tmp281;
    _hessian(11, 0) = _tmp136 * _tmp287 + _tmp140 * _tmp288;
    _hessian(12, 0) = _tmp136 * _tmp297 + _tmp140 * _tmp298;
    _hessian(0, 1) = 0;
    _hessian(1, 1) = std::pow(_tmp158, Scalar(2)) + std::pow(_tmp159, Scalar(2));
    _hessian(2, 1) = _tmp158 * _tmp171 + _tmp159 * _tmp172;
    _hessian(3, 1) = _tmp158 * _tmp194 + _tmp159 * _tmp196;
    _hessian(4, 1) = _tmp158 * _tmp210 + _tmp159 * _tmp211;
    _hessian(5, 1) = _tmp158 * _tmp227 + _tmp159 * _tmp228;
    _hessian(6, 1) = _tmp158 * _tmp245 + _tmp159 * _tmp246;
    _hessian(7, 1) = _tmp158 * _tmp257 + _tmp159 * _tmp258;
    _hessian(8, 1) = _tmp158 * _tmp266 + _tmp159 * _tmp267;
    _hessian(9, 1) = _tmp158 * _tmp273 + _tmp159 * _tmp274;
    _hessian(10, 1) = _tmp158 * _tmp280 + _tmp159 * _tmp281;
    _hessian(11, 1) = _tmp158 * _tmp287 + _tmp159 * _tmp288;
    _hessian(12, 1) = _tmp158 * _tmp297 + _tmp159 * _tmp298;
    _hessian(0, 2) = 0;
    _hessian(1, 2) = 0;
    _hessian(2, 2) = std::pow(_tmp171, Scalar(2)) + std::pow(_tmp172, Scalar(2));
    _hessian(3, 2) = _tmp171 * _tmp194 + _tmp172 * _tmp196;
    _hessian(4, 2) = _tmp171 * _tmp210 + _tmp172 * _tmp211;
    _hessian(5, 2) = _tmp171 * _tmp227 + _tmp172 * _tmp228;
    _hessian(6, 2) = _tmp171 * _tmp245 + _tmp172 * _tmp246;
    _hessian(7, 2) = _tmp171 * _tmp257 + _tmp172 * _tmp258;
    _hessian(8, 2) = _tmp171 * _tmp266 + _tmp172 * _tmp267;
    _hessian(9, 2) = _tmp171 * _tmp273 + _tmp172 * _tmp274;
    _hessian(10, 2) = _tmp171 * _tmp280 + _tmp172 * _tmp281;
    _hessian(11, 2) = _tmp171 * _tmp287 + _tmp172 * _tmp288;
    _hessian(12, 2) = _tmp171 * _tmp297 + _tmp172 * _tmp298;
    _hessian(0, 3) = 0;
    _hessian(1, 3) = 0;
    _hessian(2, 3) = 0;
    _hessian(3, 3) = std::pow(_tmp194, Scalar(2)) + std::pow(_tmp196, Scalar(2));
    _hessian(4, 3) = _tmp194 * _tmp210 + _tmp196 * _tmp211;
    _hessian(5, 3) = _tmp194 * _tmp227 + _tmp196 * _tmp228;
    _hessian(6, 3) = _tmp194 * _tmp245 + _tmp196 * _tmp246;
    _hessian(7, 3) = _tmp194 * _tmp257 + _tmp196 * _tmp258;
    _hessian(8, 3) = _tmp194 * _tmp266 + _tmp196 * _tmp267;
    _hessian(9, 3) = _tmp194 * _tmp273 + _tmp196 * _tmp274;
    _hessian(10, 3) = _tmp194 * _tmp280 + _tmp196 * _tmp281;
    _hessian(11, 3) = _tmp194 * _tmp287 + _tmp196 * _tmp288;
    _hessian(12, 3) = _tmp194 * _tmp297 + _tmp196 * _tmp298;
    _hessian(0, 4) = 0;
    _hessian(1, 4) = 0;
    _hessian(2, 4) = 0;
    _hessian(3, 4) = 0;
    _hessian(4, 4) = std::pow(_tmp210, Scalar(2)) + std::pow(_tmp211, Scalar(2));
    _hessian(5, 4) = _tmp210 * _tmp227 + _tmp211 * _tmp228;
    _hessian(6, 4) = _tmp210 * _tmp245 + _tmp211 * _tmp246;
    _hessian(7, 4) = _tmp210 * _tmp257 + _tmp211 * _tmp258;
    _hessian(8, 4) = _tmp210 * _tmp266 + _tmp211 * _tmp267;
    _hessian(9, 4) = _tmp210 * _tmp273 + _tmp211 * _tmp274;
    _hessian(10, 4) = _tmp210 * _tmp280 + _tmp211 * _tmp281;
    _hessian(11, 4) = _tmp210 * _tmp287 + _tmp211 * _tmp288;
    _hessian(12, 4) = _tmp210 * _tmp297 + _tmp211 * _tmp298;
    _hessian(0, 5) = 0;
    _hessian(1, 5) = 0;
    _hessian(2, 5) = 0;
    _hessian(3, 5) = 0;
    _hessian(4, 5) = 0;
    _hessian(5, 5) = std::pow(_tmp227, Scalar(2)) + std::pow(_tmp228, Scalar(2));
    _hessian(6, 5) = _tmp227 * _tmp245 + _tmp228 * _tmp246;
    _hessian(7, 5) = _tmp227 * _tmp257 + _tmp228 * _tmp258;
    _hessian(8, 5) = _tmp227 * _tmp266 + _tmp228 * _tmp267;
    _hessian(9, 5) = _tmp227 * _tmp273 + _tmp228 * _tmp274;
    _hessian(10, 5) = _tmp227 * _tmp280 + _tmp228 * _tmp281;
    _hessian(11, 5) = _tmp227 * _tmp287 + _tmp228 * _tmp288;
    _hessian(12, 5) = _tmp227 * _tmp297 + _tmp228 * _tmp298;
    _hessian(0, 6) = 0;
    _hessian(1, 6) = 0;
    _hessian(2, 6) = 0;
    _hessian(3, 6) = 0;
    _hessian(4, 6) = 0;
    _hessian(5, 6) = 0;
    _hessian(6, 6) = std::pow(_tmp245, Scalar(2)) + std::pow(_tmp246, Scalar(2));
    _hessian(7, 6) = _tmp245 * _tmp257 + _tmp246 * _tmp258;
    _hessian(8, 6) = _tmp245 * _tmp266 + _tmp246 * _tmp267;
    _hessian(9, 6) = _tmp245 * _tmp273 + _tmp246 * _tmp274;
    _hessian(10, 6) = _tmp245 * _tmp280 + _tmp246 * _tmp281;
    _hessian(11, 6) = _tmp245 * _tmp287 + _tmp246 * _tmp288;
    _hessian(12, 6) = _tmp245 * _tmp297 + _tmp246 * _tmp298;
    _hessian(0, 7) = 0;
    _hessian(1, 7) = 0;
    _hessian(2, 7) = 0;
    _hessian(3, 7) = 0;
    _hessian(4, 7) = 0;
    _hessian(5, 7) = 0;
    _hessian(6, 7) = 0;
    _hessian(7, 7) = std::pow(_tmp257, Scalar(2)) + std::pow(_tmp258, Scalar(2));
    _hessian(8, 7) = _tmp257 * _tmp266 + _tmp258 * _tmp267;
    _hessian(9, 7) = _tmp257 * _tmp273 + _tmp258 * _tmp274;
    _hessian(10, 7) = _tmp257 * _tmp280 + _tmp258 * _tmp281;
    _hessian(11, 7) = _tmp257 * _tmp287 + _tmp258 * _tmp288;
    _hessian(12, 7) = _tmp257 * _tmp297 + _tmp258 * _tmp298;
    _hessian(0, 8) = 0;
    _hessian(1, 8) = 0;
    _hessian(2, 8) = 0;
    _hessian(3, 8) = 0;
    _hessian(4, 8) = 0;
    _hessian(5, 8) = 0;
    _hessian(6, 8) = 0;
    _hessian(7, 8) = 0;
    _hessian(8, 8) = std::pow(_tmp266, Scalar(2)) + std::pow(_tmp267, Scalar(2));
    _hessian(9, 8) = _tmp266 * _tmp273 + _tmp267 * _tmp274;
    _hessian(10, 8) = _tmp266 * _tmp280 + _tmp267 * _tmp281;
    _hessian(11, 8) = _tmp266 * _tmp287 + _tmp267 * _tmp288;
    _hessian(12, 8) = _tmp266 * _tmp297 + _tmp267 * _tmp298;
    _hessian(0, 9) = 0;
    _hessian(1, 9) = 0;
    _hessian(2, 9) = 0;
    _hessian(3, 9) = 0;
    _hessian(4, 9) = 0;
    _hessian(5, 9) = 0;
    _hessian(6, 9) = 0;
    _hessian(7, 9) = 0;
    _hessian(8, 9) = 0;
    _hessian(9, 9) = std::pow(_tmp273, Scalar(2)) + std::pow(_tmp274, Scalar(2));
    _hessian(10, 9) = _tmp273 * _tmp280 + _tmp274 * _tmp281;
    _hessian(11, 9) = _tmp273 * _tmp287 + _tmp274 * _tmp288;
    _hessian(12, 9) = _tmp273 * _tmp297 + _tmp274 * _tmp298;
    _hessian(0, 10) = 0;
    _hessian(1, 10) = 0;
    _hessian(2, 10) = 0;
    _hessian(3, 10) = 0;
    _hessian(4, 10) = 0;
    _hessian(5, 10) = 0;
    _hessian(6, 10) = 0;
    _hessian(7, 10) = 0;
    _hessian(8, 10) = 0;
    _hessian(9, 10) = 0;
    _hessian(10, 10) = std::pow(_tmp280, Scalar(2)) + std::pow(_tmp281, Scalar(2));
    _hessian(11, 10) = _tmp280 * _tmp287 + _tmp281 * _tmp288;
    _hessian(12, 10) = _tmp280 * _tmp297 + _tmp281 * _tmp298;
    _hessian(0, 11) = 0;
    _hessian(1, 11) = 0;
    _hessian(2, 11) = 0;
    _hessian(3, 11) = 0;
    _hessian(4, 11) = 0;
    _hessian(5, 11) = 0;
    _hessian(6, 11) = 0;
    _hessian(7, 11) = 0;
    _hessian(8, 11) = 0;
    _hessian(9, 11) = 0;
    _hessian(10, 11) = 0;
    _hessian(11, 11) = std::pow(_tmp287, Scalar(2)) + std::pow(_tmp288, Scalar(2));
    _hessian(12, 11) = _tmp287 * _tmp297 + _tmp288 * _tmp298;
    _hessian(0, 12) = 0;
    _hessian(1, 12) = 0;
    _hessian(2, 12) = 0;
    _hessian(3, 12) = 0;
    _hessian(4, 12) = 0;
    _hessian(5, 12) = 0;
    _hessian(6, 12) = 0;
    _hessian(7, 12) = 0;
    _hessian(8, 12) = 0;
    _hessian(9, 12) = 0;
    _hessian(10, 12) = 0;
    _hessian(11, 12) = 0;
    _hessian(12, 12) = std::pow(_tmp297, Scalar(2)) + std::pow(_tmp298, Scalar(2));
  }

  if (rhs != nullptr) {
    Eigen::Matrix<Scalar, 13, 1>& _rhs = (*rhs);

    _rhs(0, 0) = _tmp136 * _tmp93 + _tmp140 * _tmp94;
    _rhs(1, 0) = _tmp158 * _tmp93 + _tmp159 * _tmp94;
    _rhs(2, 0) = _tmp171 * _tmp93 + _tmp172 * _tmp94;
    _rhs(3, 0) = _tmp194 * _tmp93 + _tmp196 * _tmp94;
    _rhs(4, 0) = _tmp210 * _tmp93 + _tmp211 * _tmp94;
    _rhs(5, 0) = _tmp227 * _tmp93 + _tmp228 * _tmp94;
    _rhs(6, 0) = _tmp245 * _tmp93 + _tmp246 * _tmp94;
    _rhs(7, 0) = _tmp257 * _tmp93 + _tmp258 * _tmp94;
    _rhs(8, 0) = _tmp266 * _tmp93 + _tmp267 * _tmp94;
    _rhs(9, 0) = _tmp273 * _tmp93 + _tmp274 * _tmp94;
    _rhs(10, 0) = _tmp280 * _tmp93 + _tmp281 * _tmp94;
    _rhs(11, 0) = _tmp287 * _tmp93 + _tmp288 * _tmp94;
    _rhs(12, 0) = _tmp297 * _tmp93 + _tmp298 * _tmp94;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
