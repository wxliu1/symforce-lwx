// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/atan_camera_cal.h>
#include <sym/pose3.h>

namespace sym {

/**
 * Reprojects the landmark into the target camera and returns the delta from the correspondence to
 * the reprojection.
 *
 * The landmark is specified as a pixel in the source camera and an inverse range; this means the
 * landmark is fixed in the source camera and always has residual 0 there (this 0 residual is not
 * returned, only the residual in the target camera is returned).
 *
 * Args:
 *     source_pose: The pose of the source camera
 *     source_calibration: The source camera calibration
 *     target_pose: The pose of the target camera
 *     target_calibration: The target camera calibration
 *     source_inverse_range: The inverse range of the landmark in the source camera
 *     source_pixel: The location of the landmark in the source camera
 *     target_pixel: The location of the correspondence in the target camera
 *     epsilon: Small positive value
 *     camera_model_class: The subclass of CameraCal to use as the camera model
 *
 * Outputs:
 *     res: 2dof pixel reprojection error
 *     valid: is valid projection or not
 */
template <typename Scalar>
void AtanReprojectionDelta(const sym::Pose3<Scalar>& source_pose,
                           const sym::ATANCameraCal<Scalar>& source_calibration,
                           const sym::Pose3<Scalar>& target_pose,
                           const sym::ATANCameraCal<Scalar>& target_calibration,
                           const Scalar source_inverse_range,
                           const Eigen::Matrix<Scalar, 2, 1>& source_pixel,
                           const Eigen::Matrix<Scalar, 2, 1>& target_pixel, const Scalar epsilon,
                           Eigen::Matrix<Scalar, 2, 1>* const reprojection_delta = nullptr,
                           Scalar* const is_valid = nullptr) {
  // Total ops: 162

  // Input arrays
  const Eigen::Matrix<Scalar, 7, 1>& _source_pose = source_pose.Data();
  const Eigen::Matrix<Scalar, 5, 1>& _source_calibration = source_calibration.Data();
  const Eigen::Matrix<Scalar, 7, 1>& _target_pose = target_pose.Data();
  const Eigen::Matrix<Scalar, 5, 1>& _target_calibration = target_calibration.Data();

  // Intermediate terms (46)
  const Scalar _tmp0 = -2 * std::pow(_target_pose[2], Scalar(2));
  const Scalar _tmp1 = 1 - 2 * std::pow(_target_pose[1], Scalar(2));
  const Scalar _tmp2 = 2 * _source_pose[0] * _source_pose[2];
  const Scalar _tmp3 = 2 * _source_pose[1];
  const Scalar _tmp4 = _source_pose[3] * _tmp3;
  const Scalar _tmp5 = -_source_calibration[3] + source_pixel(1, 0);
  const Scalar _tmp6 = std::pow(_tmp5, Scalar(2)) / std::pow(_source_calibration[1], Scalar(2));
  const Scalar _tmp7 = std::tan(Scalar(0.5) * _source_calibration[4]);
  const Scalar _tmp8 = -_source_calibration[2] + source_pixel(0, 0);
  const Scalar _tmp9 = std::pow(_tmp8, Scalar(2)) / std::pow(_source_calibration[0], Scalar(2));
  const Scalar _tmp10 = _tmp6 + _tmp9 + epsilon;
  const Scalar _tmp11 = std::sqrt(_tmp10);
  const Scalar _tmp12 = _source_calibration[4] * _tmp11;
  const Scalar _tmp13 = std::tan(_tmp12);
  const Scalar _tmp14 =
      (Scalar(1) / Scalar(4)) * std::pow(_tmp13, Scalar(2)) / (_tmp10 * std::pow(_tmp7, Scalar(2)));
  const Scalar _tmp15 = std::pow(Scalar(_tmp14 * _tmp6 + _tmp14 * _tmp9 + epsilon + 1),
                                 Scalar(Scalar(-1) / Scalar(2)));
  const Scalar _tmp16 = _source_pose[0] * _tmp3;
  const Scalar _tmp17 = 2 * _source_pose[3];
  const Scalar _tmp18 = _source_pose[2] * _tmp17;
  const Scalar _tmp19 = (Scalar(1) / Scalar(2)) * _tmp13 * _tmp15 / (_tmp11 * _tmp7);
  const Scalar _tmp20 = _tmp19 * _tmp5 / _source_calibration[1];
  const Scalar _tmp21 = -2 * std::pow(_source_pose[2], Scalar(2));
  const Scalar _tmp22 = 1 - 2 * std::pow(_source_pose[1], Scalar(2));
  const Scalar _tmp23 = _tmp19 * _tmp8 / _source_calibration[0];
  const Scalar _tmp24 = _tmp15 * (_tmp2 + _tmp4) + _tmp20 * (_tmp16 - _tmp18) +
                        _tmp23 * (_tmp21 + _tmp22) +
                        source_inverse_range * (_source_pose[4] - _target_pose[4]);
  const Scalar _tmp25 = 2 * _target_pose[2];
  const Scalar _tmp26 = _target_pose[0] * _tmp25;
  const Scalar _tmp27 = 2 * _target_pose[3];
  const Scalar _tmp28 = _target_pose[1] * _tmp27;
  const Scalar _tmp29 = -2 * std::pow(_source_pose[0], Scalar(2));
  const Scalar _tmp30 = _source_pose[0] * _tmp17;
  const Scalar _tmp31 = _source_pose[2] * _tmp3;
  const Scalar _tmp32 = _tmp15 * (_tmp22 + _tmp29) + _tmp20 * (_tmp30 + _tmp31) +
                        _tmp23 * (_tmp2 - _tmp4) +
                        source_inverse_range * (_source_pose[6] - _target_pose[6]);
  const Scalar _tmp33 = _target_pose[2] * _tmp27;
  const Scalar _tmp34 = 2 * _target_pose[0] * _target_pose[1];
  const Scalar _tmp35 = _tmp15 * (-_tmp30 + _tmp31) + _tmp20 * (_tmp21 + _tmp29 + 1) +
                        _tmp23 * (_tmp16 + _tmp18) +
                        source_inverse_range * (_source_pose[5] - _target_pose[5]);
  const Scalar _tmp36 =
      _tmp24 * (_tmp0 + _tmp1) + _tmp32 * (_tmp26 - _tmp28) + _tmp35 * (_tmp33 + _tmp34);
  const Scalar _tmp37 = -2 * std::pow(_target_pose[0], Scalar(2));
  const Scalar _tmp38 = _target_pose[1] * _tmp25;
  const Scalar _tmp39 = _target_pose[0] * _tmp27;
  const Scalar _tmp40 =
      _tmp24 * (_tmp26 + _tmp28) + _tmp32 * (_tmp1 + _tmp37) + _tmp35 * (_tmp38 - _tmp39);
  const Scalar _tmp41 = std::max<Scalar>(_tmp40, epsilon);
  const Scalar _tmp42 = std::pow(_tmp41, Scalar(-2));
  const Scalar _tmp43 =
      _tmp24 * (-_tmp33 + _tmp34) + _tmp32 * (_tmp38 + _tmp39) + _tmp35 * (_tmp0 + _tmp37 + 1);
  const Scalar _tmp44 = std::sqrt(Scalar(std::pow(_tmp36, Scalar(2)) * _tmp42 +
                                         _tmp42 * std::pow(_tmp43, Scalar(2)) + epsilon));
  const Scalar _tmp45 = std::atan(2 * _tmp44 * std::tan(Scalar(0.5) * _target_calibration[4])) /
                        (_target_calibration[4] * _tmp41 * _tmp44);

  // Output terms (2)
  if (reprojection_delta != nullptr) {
    Eigen::Matrix<Scalar, 2, 1>& _reprojection_delta = (*reprojection_delta);

    _reprojection_delta(0, 0) =
        _target_calibration[0] * _tmp36 * _tmp45 + _target_calibration[2] - target_pixel(0, 0);
    _reprojection_delta(1, 0) =
        _target_calibration[1] * _tmp43 * _tmp45 + _target_calibration[3] - target_pixel(1, 0);
  }

  if (is_valid != nullptr) {
    Scalar& _is_valid = (*is_valid);

    _is_valid = std::max<Scalar>(0, (((_tmp40) > 0) - ((_tmp40) < 0))) *
                std::max<Scalar>(0, (((-std::fabs(_tmp12) + Scalar(M_PI_2)) > 0) -
                                     ((-std::fabs(_tmp12) + Scalar(M_PI_2)) < 0)));
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
