/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
{% if lcmtype.struct.source_file %}
 *
 * From Source File: {{ lcmtype.struct.source_file }}
{% endif %}
 **/

#include <lcm/lcm_coretypes.h>
#include <lcm/lcm_cpptypes.hpp>

#ifndef __{{lcmtype.underscored}}_hpp__
#define __{{lcmtype.underscored}}_hpp__

{% if not lcmtype.cpp_no_display %}
{% if not lcmtype.cpp_display_everywhere %}
#if defined(SKYMARSHAL_PRINTING_ENABLED)
{% endif %}
#include <lcm/lcm_reflection.hpp>
#include <array>
{% if not lcmtype.cpp_display_everywhere %}
#endif
{% endif %}
#include <ostream>
{% endif %}

{{lcmtype.includes()}}
namespace {{lcmtype.namespace}}
{
{{lcmtype.comment}}
class {{lcmtype.name}}
{
{% if lcmtype.members %}
    public:
{{lcmtype.declare_members()}}
{% endif %}
{% if lcmtype.constants %}
{% if lcmtype.members%}

{% endif %}
    public:
{{lcmtype.define_constants()}}
{% endif %}

    public:
{% if lcmtype.members and not lcmtype.args.cpp_no_operators %}
        {{lcmtype.name}}() = default;

        /**
         * Member constructor
         */
        inline {{lcmtype.name}}(
            {{lcmtype.constructor_args()|indent(12)}}
        );
{% endif %}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline {{ size_t }} encode(void *buf, {{ size_t }} offset, {{ size_t }} maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline {{ size_t }} getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to read while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline {{ size_t }} decode(const void *buf, {{ size_t }} offset, {{ size_t }} maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
{% if lcmtype.has_complex_members() %}
        inline static int64_t getHash();
{% else %}
        constexpr static int64_t getHash();
{% endif %}

        using type_name_array_t = const char[{{lcmtype.name|length + 1}}];

        inline static constexpr type_name_array_t* getTypeNameArrayPtr();

        /**
         * Returns "{{lcmtype.name}}"
         */
        inline static constexpr const char* getTypeName();

        /**
         * Returns "{{lcmtype.namespace}}"
         */
        inline static constexpr const char * getPackageName();

        // LCM support functions. Users should not call these
        inline {{ size_t }} _encodeNoHash(void *buf, {{ size_t }} offset, {{ size_t }} maxlen) const;
        inline {{ size_t }} _getEncodedSizeNoHash() const;
        inline {{ size_t }} _decodeNoHash(const void *buf, {{ size_t }} offset, {{ size_t }} maxlen);
{% if lcmtype.has_complex_members() %}
#if !defined(SKYDIO_DISABLE_LCM_NO_INLINE)
        __attribute__((noinline))
#endif
        static uint64_t _computeHash(const __lcm_hash_ptr *p)
        {
            const __lcm_hash_ptr *fp;
            for(fp = p; fp != NULL; fp = fp->parent)
                if(fp->v == {{lcmtype.name}}::getHash)
                    return 0;
            const __lcm_hash_ptr cp = { p, {{lcmtype.name}}::getHash };

            uint64_t hash = {{lcmtype.hash}}L +
                {{ lcmtype.compute_hash() }};

            return (hash<<1) + ((hash>>63)&1);
        }
{% else %}
        constexpr static uint64_t _computeHash(const __lcm_hash_ptr *)
        {
            uint64_t hash = {{lcmtype.hash}}L;
            return (hash<<1) + ((hash>>63)&1);
        }
{% endif %}
{% if not lcmtype.args.cpp_no_operators %}

        // Comparison operators.
        inline bool operator==(const {{lcmtype.name}}& other) const;
        inline bool operator!=(const {{lcmtype.name}}& other) const;
{% endif %}

{% if not lcmtype.cpp_no_display %}
{% if not lcmtype.cpp_display_everywhere %}
#if defined(SKYMARSHAL_PRINTING_ENABLED)
{% endif %}
        constexpr static std::array<const char*, {{lcmtype.num_members}}> fields()
        {
            return {{ '{{' }}
        {% for member in lcmtype.members %}
                "{{member.name}}",
        {% endfor %}
            {{ '}}' }};
        }

        // Return true if field was found
        bool format_field(std::ostream& _stream, uint16_t field_index, uint16_t _indent) const
        {
            switch (field_index) {
{% for member in lcmtype.members %}
                case {{loop.index0}}:
                lcm::format_json(_stream, {{member.name}}, _indent);
                return true;
{% endfor %}
                default:
                return false;
            }
        }

        // Ability to print to standard streams as well as the fmt library.
        friend std::ostream& operator<<(std::ostream& _stream, const {{lcmtype.name}}& obj) {
            lcm::format_json(_stream, obj, 0);
            return _stream;
        }

{% if not lcmtype.cpp_display_everywhere %}
#else
        friend std::ostream& operator<<(std::ostream& _stream, const {{lcmtype.name}}& obj) {
            _stream << "<FORMATTING DISABLED>";
            return _stream;
        }
#endif
{% endif %}

#if defined(SKYMARSHAL_STORING_ENABLED)
        // Return value is 0 if the operation succeeded.
        // If the operation failed, return value is equal to 1 + the index of the first invalid field,
        // 1 + field_size if there are not enough fields, or 2 + field_size if the value is invalid.
        __attribute__((nodiscard)) uint16_t store_field(const char* _fields[], uint16_t _num_fields, const char* _value)
        {
            if (_num_fields == 0 || _fields[0] == nullptr) {
                return 1;
            }
{% for member in lcmtype.members %}
            if (strcmp(_fields[0], fields()[{{loop.index0}}]) == 0) {
                uint16_t ret = lcm::store_field(_fields + 1, _num_fields - 1, {{member.name}}, _value);
                return ret == 0 ? ret : ret + 1;
            }
{% endfor %}
            return 1;
        }
#endif
{% endif %}
};
{% if lcmtype.members and not lcmtype.args.cpp_no_operators %}

{{lcmtype.name}}::{{lcmtype.name}}(
    {{lcmtype.constructor_args()|indent(4)}}
) : {{lcmtype.initializers()|indent(4)}} {}
{% endif %}

{{ size_t }} {{lcmtype.name}}::encode(void *buf, {{ size_t }} offset, {{ size_t }} maxlen) const
{
    {{ size_t }} pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

{{ size_t }} {{lcmtype.name}}::decode(const void *buf, {{ size_t }} offset, {{ size_t }} maxlen)
{
    {{ size_t }} pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

{{ size_t }} {{lcmtype.name}}::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

{% if lcmtype.has_complex_members() %}
int64_t {{lcmtype.name}}::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}
{% else %}
constexpr int64_t {{lcmtype.name}}::getHash()
{
    return static_cast<int64_t>(_computeHash(NULL));
}
{% endif %}

constexpr {{lcmtype.name}}::type_name_array_t* {{lcmtype.name}}::getTypeNameArrayPtr() {
    return &"{{lcmtype.name}}";
}

constexpr const char* {{lcmtype.name}}::getTypeName()
{
    return *{{lcmtype.name}}::getTypeNameArrayPtr();
}

constexpr const char * {{lcmtype.name}}::getPackageName()
{
    return "{{lcmtype.namespace}}";
}

{% if lcmtype.members %}
{{ size_t }} {{lcmtype.name}}::_encodeNoHash(void *buf, {{ size_t }} offset, {{ size_t }} maxlen) const
{
    {{ size_t }} pos = 0, tlen;

{{ lcmtype.encode_members() }}

    return pos;
}
{% else %}
{{ size_t }} {{lcmtype.name}}::_encodeNoHash(void *, {{ size_t }}, {{ size_t }}) const
{
    return 0;
}
{% endif %}

{% if lcmtype.members %}
{{ size_t }} {{lcmtype.name}}::_decodeNoHash(const void *buf, {{ size_t }} offset, {{ size_t }} maxlen)
{
    {{ size_t }} pos = 0, tlen;

{{ lcmtype.decode_members() }}

    return pos;
}
{% else %}
{{ size_t }} {{lcmtype.name}}::_decodeNoHash(const void *, {{ size_t }}, {{ size_t }})
{
    return 0;
}
{% endif %}

{{ size_t }} {{lcmtype.name}}::_getEncodedSizeNoHash() const
{
{{ lcmtype.encoded_size() }}
}

{% if not lcmtype.args.cpp_no_operators %}
bool {{lcmtype.name}}::operator==(const {{lcmtype.name}}& other) const {
{% if lcmtype.members %}
  return (
  {% for member in lcmtype.members %}
          ({{member.name}}==other.{{member.name}})
          {%- if not loop.last %} && {% else %});{% endif %}

  {% endfor %}
{% else %}
  return true;
{% endif %}
}

bool {{lcmtype.name}}::operator!=(const {{lcmtype.name}}& other) const {
  return !(*this==other);
}
{% endif %}

}

#endif
